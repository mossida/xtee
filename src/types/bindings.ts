// This file was generated by [rspc](https://github.com/specta-rs/rspc). Do not edit this file manually.

export type Procedures = {
    queries: 
        { key: "master/controllers", input: never, result: Controller[] } | 
        { key: "master/events", input: never, result: Event } | 
        { key: "master/groups", input: never, result: ControllerGroup[] } | 
        { key: "master/ports", input: never, result: Port[] } | 
        { key: "motor/get/max-speed", input: number, result: number },
    mutations: 
        { key: "actuator/keep", input: number, result: null } | 
        { key: "actuator/load", input: number, result: null } | 
        { key: "actuator/move", input: ActuatorMovement, result: null } | 
        { key: "actuator/reload/settings", input: never, result: null } | 
        { key: "actuator/stop", input: never, result: null } | 
        { key: "actuator/unload", input: never, result: null } | 
        { key: "master/kill", input: string, result: null } | 
        { key: "master/spawn", input: Controller, result: null } | 
        { key: "motor/keep", input: [number, MotorMovement], result: null } | 
        { key: "motor/reload/settings", input: never, result: null } | 
        { key: "motor/set/outputs", input: [number, boolean], result: boolean } | 
        { key: "motor/spin", input: [number, MotorMovement], result: null } | 
        { key: "motor/stop", input: [number, MotorStopMode], result: null },
    subscriptions: never
};

export type ActuatorMovement = "load" | "unload"

export type ActuatorStatus = { status: "overloaded" } | { status: "unloading" } | { status: "loading"; data: { target: number } } | { status: "keeping"; data: { target: number } } | { status: "idle" }

export type Controller = { id: string; group: ControllerGroup; serial_port: string; baud_rate: number }

export type ControllerGroup = "default" | "motors"

export type ControllerStatus = { type: "connected" } | { type: "disconnected" } | { type: "failed"; data: { reason: string } }

export type Event = { type: "init" } | { type: "weight"; data: number } | { type: "motor-status"; data: [number, MotorStatus] } | { type: "actuator-status"; data: ActuatorStatus } | { type: "controller-status"; data: { controller: Controller; status: ControllerStatus } }

export type MotorMovement = { speed: number; direction: boolean; rotations: number }

export type MotorStatus = { status: "idle" } | { status: "stopping" } | { status: "spinning"; data: { position: number; remaining: number } }

export type MotorStopMode = "graceful" | "emergency"

export type Port = { name: string; manufacturer: string | null; serial_number: string | null }
